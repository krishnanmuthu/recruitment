<?php

 function custom_dropdown_form_alter(&$form, &$form_state, $form_id) {
 //dpm($form);
	} 

function custom_dropdown_menu() {
  $items = array();
$items['dependent_dropdown'] = array(
    'title' => 'Dependent dropdown',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_dropdown_dependent_dropdown'),
    'access callback' => TRUE,
    'weight' => 0,
  );
 return $items;
}


function custom_dropdown_dependent_dropdown($form, &$form_state) {
  // Get the list of options to populate the first dropdown.
  $options_first = _custom_dropdown_get_first_dropdown_options();
  // If we have a value for the first dropdown from $form_state['values'] we use
  // this both as the default value for the first dropdown and also as a
  // parameter to pass to the function that retrieves the options for the
  // second dropdown.
  $selected = isset($form_state['values']['field_fs_job_code']) ? $form_state['values']['field_fs_job_code'] : key($options_first);

  $form['field_fs_job_code'] = array(
    '#type' => 'select',
    '#title' => 'Instrument Type',
    '#options' => $options_first,
    '#default_value' => 'Select Job Code',
    
    // Bind an ajax callback to the change event (which is the default for the
    // select form type) of the first dropdown. It will replace the second
    // dropdown when rebuilt.
    '#ajax' => array(
      
      // When 'event' occurs, Drupal will perform an ajax request in the
      // background. Usually the default value is sufficient (eg. change for
      // select elements), but valid values include any jQuery event,
      // most notably 'mousedown', 'blur', and 'submit'.
      // 'event' => 'change',
      'callback' => 'custom_dropdown_dependent_dropdown_callback',
      'wrapper' => 'dropdown-second-replace',
    ),
  );

  $form['field_candidate_name'] = array(
    '#type' => 'select',
    '#title' => $options_first[$selected] . ' ' . t('Instruments'),
    
    // The entire enclosing div created here gets replaced when dropdown_first
    // is changed.
    '#prefix' => '<div id="dropdown-second-replace">',
    '#suffix' => '</div>',
    
    // When the form is rebuilt during ajax processing, the $selected variable
    // will now have the new value and so the options will change.
    '#options' => _custom_dropdown_get_second_dropdown_options($options_first[$selected]),
    '#default_value' => isset($form_state['values']['field_candidate_name']) ? $form_state['values']['field_candidate_name'] : '',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}


function _custom_dropdown_get_first_dropdown_options() {
  // drupal_map_assoc() just makes an array('String' => 'String'...).
  /*return drupal_map_assoc(array(
    t('None'),
    t('String'),
    t('Woodwind'),
    t('Brass'),
    t('Percussion'),
  ));*/

$result = db_select('field_data_field_job_code','fj')
                     ->fields('fj',array('field_job_code_value'))
                     ->distinct()                       
                     ->execute()
                     ->fetchCol();
return $result;
}

function _custom_dropdown_get_second_dropdown_options($key = '') {
  /*$options = array(
    t('String') => drupal_map_assoc(array(
      t('Violin'),
      t('Viola'),
      t('Cello'),
      t('Double Bass'),
    )),
    t('Woodwind') => drupal_map_assoc(array(
      t('Flute'),
      t('Clarinet'),
      t('Oboe'),
      t('Bassoon'),
    )),
    t('Brass') => drupal_map_assoc(array(
      t('Trumpet'),
      t('Trombone'),
      t('French Horn'),
      t('Euphonium'),
    )),
    t('Percussion') => drupal_map_assoc(array(
      t('Bass Drum'),
      t('Timpani'),
      t('Snare Drum'),
      t('Tambourine'),
    )),
  );
  if (isset($options[$key])) {
    return $options[$key];
  }
  else {
    return array();
  }
$result=db_select('field_data_field_ci_full_name','fn')
                     ->join('field_data_field_job_code', 'jc', 'jc.entity_id=fn.entity_id')
                     ->fields('fn',array('field_ci_full_name_value'))
                     ->condition('jc.field_job_code_value', $key,'=')
                     ->distinct()                       
                     ->execute()
                     ->fetchCol();
return $result; */

 $results=array();
$query = db_select('field_data_field_ci_full_name', 'fn');
    $query->join('field_data_field_job_code', 'jc', 'fn.entity_id=jc.entity_id');
    $query->groupBy('fn.entity_id');
    $query->fields('fn', array('field_ci_full_name_value'));
    $query->condition('jc.field_job_code_value',$key,'=');
    $query->distinct();
    $result = $query->execute();
        while($record = $result->fetchAssoc()) {
            array_push($results,$record['field_ci_full_name_value']);        
    } 
return $results;

}

function custom_dropdown_dependent_dropdown_callback($form, $form_state) {
  return $form['field_candidate_name'];
}
